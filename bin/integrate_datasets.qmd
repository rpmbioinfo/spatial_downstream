---
params:
  seurat: "/home/adampelletier/Documents/AWS_pipelines/nextflow/spatial_downstream/results/NHP_lung/seurat/seurat_dim_reduced.RDS"
  pipeline: "rna"
  integrate_datasets: TRUE
  integration_method: "Harmony"
  integrate_by: "SampleID"
  view_batch: ['SampleID']
  umap_ndims: 15
---

# Dataset Integration
Differences in tissue type, library preparation or a number of other factors can lead to batch effect-like outputs after dimension reduction and clustering. 

```{r setup, warning=F, message=F, echo=knitr::is_html_output(), eval=T}

selected_packages <- c("Seurat",
                       'tidyverse',
                       'readxl',
                       'patchwork',
                       'clustree')
#invisible(extrafont::font_import(prompt = F))
selected_font <- "Arial"
selected_font_pdf <- "ArialMT"
#extrafont::loadfonts(device = "win")
invisible(lapply(selected_packages, library, character.only = TRUE))

if(knitr::is_html_output()){
  eval_set <- TRUE
  eval_pdf <- FALSE
  echo_set <- TRUE
  message_set <- FALSE
} else {
  eval_set <- FALSE
  eval_pdf <- TRUE
  echo_set <- FALSE
  message_set <- FALSE
}

source("run_funcs.R")

options(future.globals.maxSize = 8000 * 1024^2)
knitr::opts_chunk$set(echo = echo_set,  warning = FALSE, message = FALSE, fig.align = "center", eval = TRUE, fig.width = 10, cache.lazy = F)

```

```{r echo=F}


run_gex <- TRUE
run_adt <- FALSE


if(params$pipeline == "cite"){
  run_adt <- TRUE
}


multimodal <- FALSE

```

## Analysis Parameters
```{r echo=FALSE}


df <- params_to_df(params)
df
```

## Load Data
```{r }
seurat <- readRDS(params$seurat)

```


## View Batch Effects
We will first attempt to visualize potential batch effects to decide whether we need to correct for them. 

`r if(run_gex){"### RNA Batch"}`
```{r eval=run_gex, echo=run_gex & echo_set }


for(i in params$view_batch){
  if(i == "SampleID"){
    print(DimPlot(seurat, group.by = "SampleID", reduction = 'umap.rna' , label = T, repel = T) + NoLegend())
  } else {
    print(DimPlot(seurat, group.by = "SampleID", split.by = i, reduction = 'umap.rna' , label = T, repel = T) + NoLegend())
  }
  
}



```

```{r echo=F}
integrate_blurb <- paste0("#### RNA Batch Integration\nPipeline set to `integrate_datasets` to **TRUE**. Integrating **RNA** modality across datasets from variable ",
                          params$integrate_by)

```


`r if(run_gex & params$integrate_datasets){integrate_blurb}`
```{r eval=run_gex & params$integrate_datasets, echo=run_gex & params$integrate_datasets & echo_set}

if(params$integration_method == "CCA"){
  stop("CCA currently not working for SCT normalized data. Use `Harmony` instead.")
  intMeth <- CCAIntegration
} else if(params$integration_method == "RPCA"){
  stop("RPCA currently not working for SCT normalized data. Use `Harmony` instead.")
   intMeth <- RPCAIntegration
} else if(params$integration_method == "Harmony"){
   intMeth <- HarmonyIntegration
   
} else if(params$integration_method == "FastMNN"){
  stop("FastMNN currently not working for SCT normalized data. Use `Harmony` instead.")
   intMeth <- FastMNNIntegration
} 

int_factor <- setNames(seurat[[params$integrate_by]][,1],colnames(seurat))




DefaultAssay(seurat) <- 'Spatial'
seurat[['Spatial']] <- split(seurat[['Spatial']], f = int_factor )

seurat <- SCTransform(seurat, verbose = FALSE, assay = "Spatial", ncells = 3000)


seurat <- IntegrateLayers(object = seurat, 
                          method = intMeth,
                          orig.reduction = "pca", 
                          new.reduction = "integrated.rna",
                          normalization.method = "SCT",
                          verbose = FALSE)

#seurat <- PrepSCTFindMarkers(seurat, verbose = F,assay = "SCT")
#seurat <- JoinLayers(seurat)





seurat <- RunUMAP(seurat, reduction = 'integrated.rna', dims = 1:params$umap_ndims, reduction.name = 'umap.rna.int', verbose = F, reduction.key = 'UMAP')


p1 <- DimPlot(seurat, group.by = params$integrate_by, reduction = 'umap.rna' ) + ggtitle("Non integrated RNA")
p2 <- DimPlot(seurat, group.by = params$integrate_by, reduction = 'umap.rna.int' ) + ggtitle("Integrated RNA")

( p1 | p2 ) + plot_layout(guides = "collect")


```



`r if(run_adt){"### Protein Batch"}`
```{r eval=run_adt, echo=run_adt & echo_set }
for(i in params$view_batch){
  print(DimPlot(seurat, group.by = "SampleID", split.by = i, reduction = 'umap.adt' , label = T, repel = T, raster = T) + NoLegend())
}



```

```{r echo=F}
integrate_blurb <- paste0("#### Protein Batch Integration\nPipeline set to `integrate_datasets` to **TRUE**. Integrating **ADT** modality across datasets from variable ",
                          params$integrate_by)

```

`r if(run_adt & params$integrate_datasets){integrate_blurb}`
```{r eval=run_adt & params$integrate_datasets, echo=run_adt & params$integrate_datasets & echo_set}


DefaultAssay(seurat) <- 'ADT'

int_factor <- setNames(seurat[[params$integrate_by]][,1],colnames(seurat))

seurat[['ADT']] <- split(seurat[['ADT']], f = int_factor )


seurat <- IntegrateLayers(object = seurat, 
                          method = intMeth,
                          orig.reduction = "apca", 
                          new.reduction = "integrated.adt",
                          normalization.method = 'CLR',
                          verbose = FALSE)
seurat <- JoinLayers(seurat)



seurat <- RunUMAP(seurat, reduction = 'integrated.adt', dims = 1:20, reduction.name = 'umap.adt.int')


p1 <- DimPlot(seurat, group.by = params$integrate_by, reduction = 'umap.adt' , raster = T) + ggtitle("Non integrated ADT")
p2 <- DimPlot(seurat, group.by = params$integrate_by, reduction = 'umap.adt.int' , raster = T) + ggtitle("Integrated ADT")

( p1 | p2 ) + plot_layout(guides = "collect")
```

```{r }
saveRDS(seurat, file = "seurat_integrated.RDS")

```
